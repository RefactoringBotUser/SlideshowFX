import com.sun.javafx.PlatformUtil

version = '1.3'

dependencies {
    compile project(':SlideshowFX-engines')
    compile project(':SlideshowFX-global-configuration')
    compile project(':SlideshowFX-plugin')
    compile project(':SlideshowFX-osgi')
    compile project(":SlideshowFX-server")
    compile project(':SlideshowFX-utils')

    compile project(':SlideshowFX-content-extension')
    compile project(':SlideshowFX-hosting-connector')
    compile project(':SlideshowFX-markup')
    compile project(':SlideshowFX-snippet-executor')

    compile configurations.asciidoctorj
    compile configurations.felix
    compile configurations.fontawesomefx
    compile configurations.freemarker
    compile configurations.jsoup
    compile configurations.twitter4j
    compile configurations.vertx
    compile configurations.zxing

    testCompile configurations.junit
    testCompile configurations.mockito
}

jar {
    manifest {
        attributes("Implementation-Title": "SlideshowFX",
                   "Implementation-Version": version,
                   "Implementation-Vendor": "Thierry Wasylczenko",
                   "JavaFX-Preloader-Class": "com.twasyl.slideshowfx.app.SlideshowFXPreloader",
                   "Main-Class": "com.twasyl.slideshowfx.app.SlideshowFX",
                   "JavaFX-Version": "8.0+",
                   "Class-Path": configurations.compile.collect { it.getName() }.join(' '))
    }
}

test {
    workingDir = rootDir
    jvmArgs "-DtestResultsDir=${testResultsDir.absolutePath}"
}

task javafx(dependsOn: [ 'jar' ]) << {
    def javafxFolder = new File(buildDir, 'javafx')
    def resourcesFolder = new File(buildDir, "resources")

    // Create the JavaFX bundle
    ant.importBuild "${rootDir.absolutePath}/src/main/resources/javafx/${project.name}.xml"
    ant.classpath = "${jdk}/lib/ant-javafx.jar"

    ant.deployOutDir = javafxFolder.absolutePath
    ant.deployResourcesDir = resourcesFolder.absolutePath

    // Copy libs
    copy {
        from project.configurations.compile
        from project.jar.archivePath

        into(resourcesFolder)
    }

    if(PlatformUtil.isMac()) {
        println "Create ${project.name} package for the OSX platform"
        deployOSX.execute()
    } else if(PlatformUtil.isWindows()) {
        println "Create ${project.name} package for the Windows platform"
        deployWindows.execute()
    } else {
        println "Create ${project.name} package an unknown platform"
        deployUnknown.execute()
    }

    resourcesFolder.deleteDir()
}

tasks.bintrayUpload.enabled = false