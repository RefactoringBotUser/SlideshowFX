buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
    }
}

class CopyBundleResourcesTask extends DefaultTask {

    @TaskAction
    def copy() {
        if (!project.javafx.packagingResourcesFolder.exists()) {
            project.javafx.packagingResourcesFolder.mkdirs()
        }

        project.javafx.bundleResources.each { key, value ->
            def root =  new File(project.javafx.packagingResourcesFolder, key)
            if (!root.exists()) {
                root.mkdirs()
            }

            value.each { f ->
                project.copy {
                    from f
                    into root
                }
            }
        }
    }
}

class CreateBundleTask extends DefaultTask {

    boolean isMac() {
        def os = System.properties.'os.name';
        os.startsWith("Mac")
    }

    boolean isWindows() {
        def os = System.properties.'os.name';
        os.startsWith("Windows")
    }

    boolean isLinux() {
        def os = System.properties.'os.name';
        os.startsWith("Linux")
    }

    String getJDK() {
        System.env.'JAVA_HOME'
    }

    @OutputDirectory
    public File getBundleFile() {
        return project.file("${project.buildDir.absolutePath}/packaging/bundles/" + getBundleName())
    }

    public String getBundleName() {
        return "${-> project.javafx.bundleBaseName}" + ((isMac() ? ".app" : ""))
    }


    @TaskAction
    def bundle() {
        // Create the JavaFX bundle
        project.ant.importBuild "$project.javafx.antBuild"
        project.ant.classpath = "${getJDK()}/lib/ant-javafx.jar"

        project.ant.deployOutFile = project.javafx.bundleBaseName
        project.ant.deployOutDir = project.javafx.packagingFolder.absolutePath
        project.ant.deployResourcesDir = project.javafx.packagingResourcesFolder.absolutePath

        if (!project.javafx.antProperties.isEmpty()) {
            logger.debug("There are additional ANT properties")

            project.javafx.antProperties.each { key, value ->
                logger.debug("Addtional ANT property $key with value $value")
                project.ant.properties.put(key, value)
            }
        }

        if (isMac()) {
            logger.info("Create ${project.name} package for the OSX platform")
            project.deployOSX.execute()
        } else if (isWindows()) {
            logger.info("Create ${project.name} package for the Windows platform")
            project.deployWindows.execute()
        } else {
            logger.info("Create ${project.name} package an unknown platform")
            project.deployUnknown.execute()
        }

        logger.debug("Bundle located at $bundleFile.absolutePath")
    }
}

class JavaFXPlugin implements Plugin<Project> {


    void apply(Project project) {

        project.extensions.create("javafx", JavaFXPluginExtension)

        project.tasks.create("copyBundleResources", CopyBundleResourcesTask.class)
        project.tasks.create('bundle', CreateBundleTask.class)

        project.tasks.copyBundleResources.dependsOn project.tasks.jar
        project.tasks.copyBundleResources.outputs.upToDateWhen { false }
        project.tasks.copyBundleResources.with { project.javafx.bundleResources }

        project.tasks.bundle.dependsOn project.tasks.copyBundleResources
        project.tasks.bundle.dependsOn project.tasks.jar

        project.javafx.packagingFolder = new File(project.buildDir, "packaging")
        project.javafx.packagingResourcesFolder = new File(project.buildDir, "packagingResources")
    }
}

class JavaFXPluginExtension {
    File antBuild
    String bundleBaseName
    Map<String, FileCollection> bundleResources = new HashMap<>()
    Map<String, Object> antProperties = new HashMap<>();
    File packagingFolder
    File packagingResourcesFolder
}

allprojects {

    repositories {
        jcenter()
        mavenCentral()
    }

    apply plugin: 'com.jfrog.bintray'

    ext {
        os = System.properties.'os.name'
        osArch = System.properties.'os.arch'
        isMac = os.startsWith("Mac")
        isWindows = os.startsWith("Windows")
        isLinux = os.startsWith("Linux")
    }

    bintray {
        user =  project.findProperty('bintray_user_name') ?: System.getenv('BINTRAY_USER_NAME')
        key = project.findProperty('bintray_api_key') ?: System.getenv('BINTRAY_API_KEY')

        pkg {
            repo = 'SlideshowFX'
            name = project.name
            websiteUrl = 'https://slideshowfx.github.io'
            issueTrackerUrl = 'https://github.com/twasyl/SlideshowFX/issues'
            vcsUrl = 'https://github.com/twasyl/SlideshowFX.git'

            desc = project.description

            licenses = ['Apache-2.0']

            githubRepo = 'twasyl/SlideshowFX'
            githubReleaseNotesFile = 'CHANGELOG.textile'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'project-report'

    if(project.path == ":SlideshowFX-app" || project.path == ":SlideshowFX-setup") {
        apply plugin: JavaFXPlugin
    }

    group = "com.twasyl.slideshowfx"

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources {
                srcDir 'src/integration-test/resources'
            }
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    test {
        useJUnit()
        reports.html.enabled = true
        reports.html.destination = file("${project.reporting.baseDir}/${name}")
    }
}

ext {
    // Dependencies versions
    asciidoctorjVersion = '1.5.5'
    felixVersion = '5.6.4'
    freemarkerVersion = '2.3.26-incubating'
    jsoupVersion = '1.10.3'
    junitVersion = '4.12'
    markdownVersion = '0.13'
    mockitoVersion = '2.8.47'
    rxJavaVersion = '2.1.1'
    twitterVersion = '4.0.6'
    vertxVersion = '3.4.2'
    wikitextVersion = '3.0.9'
    zxingVersion = '3.3.0'

    jdk = System.env.'JAVA_HOME'

    asciidoctorMarkupBintrayUploadEnabled = true
    htmlMarkupBintrayUploadEnabled = false
    markdownMarkupBintrayUploadEnabled = false
    textileMarkupBintrayUploadEnabled = true

    boxHostingConnectorBintrayUploadEnabled = true
    driveHostingConnectorBintrayUploadEnabled = true
    dropboxHostingConnectorBintrayUploadEnabled = true

    alertContentExtensionBintrayUploadEnabled = true
    codeContentExtensionBintrayUploadEnabled = true
    shapeContentExtensionBintrayUploadEnabled = true
    imageContentExtensionBintrayUploadEnabled = true
    linkContentExtensionBintrayUploadEnabled = true
    quizContentExtensionBintrayUploadEnabled = true
    quoteContentExtensionBintrayUploadEnabled = true
    sequenceDiagramContentExtensionBintrayUploadEnabled = true
    snippetContentExtensionBintrayUploadEnabled = true

    goSnippetExecutorBintrayUploadEnabled = false
    goloSnippetExecutorBintrayUploadEnabled = false
    groovySnippetExecutorBintrayUploadEnabled = false
    javaSnippetExecutorBintrayUploadEnabled = false
    javascriptSnippetExecutorBintrayUploadEnabled = false
    kotlinSnippetExecutorBintrayUploadEnabled = false
    scalaSnippetExecutorBintrayUploadEnabled = false

    pluginsFolder = new File(System.getProperty("user.home"), '.SlideshowFX/plugins')
    felixCacheFolder = new File(System.getProperty("user.home"), '.SlideshowFX/felix-cache')

    markupJars = [ project(':SlideshowFX-asciidoctor').jar, project(':SlideshowFX-html').jar,
                   project(':SlideshowFX-markdown').jar, project(':SlideshowFX-textile').jar  ]

    markupJarDependencies = [ ':SlideshowFX-asciidoctor:jar', ':SlideshowFX-html:jar', ':SlideshowFX-markdown:jar',
                              ':SlideshowFX-textile:jar' ]

    markupBintrayUploadDependencies = [ ':SlideshowFX-asciidoctor:bintrayUpload', ':SlideshowFX-html:bintrayUpload',
                                        ':SlideshowFX-markdown:bintrayUpload', ':SlideshowFX-textile:bintrayUpload' ]

    contentExtensionJars = [ project(':SlideshowFX-alert-extension').jar, project(':SlideshowFX-code-extension').jar,
                             project(':SlideshowFX-shape-extension').jar, project(':SlideshowFX-image-extension').jar,
                             project(':SlideshowFX-link-extension').jar, project(':SlideshowFX-quiz-extension').jar,
                             project(':SlideshowFX-quote-extension').jar, project(':SlideshowFX-sequence-diagram-extension').jar,
                             project(':SlideshowFX-snippet-extension').jar ]

    contentExtensionJarDependencies = [ ':SlideshowFX-alert-extension:jar', ':SlideshowFX-code-extension:jar',
                                        ':SlideshowFX-shape-extension:jar', ':SlideshowFX-image-extension:jar',
                                        ':SlideshowFX-link-extension:jar', ':SlideshowFX-quiz-extension:jar',
                                        ':SlideshowFX-quote-extension:jar', ':SlideshowFX-sequence-diagram-extension:jar',
                                        ':SlideshowFX-snippet-extension:jar' ]

    contentExtensionBintrayUploadDependencies = [ ':SlideshowFX-alert-extension:bintrayUpload',
                                                  ':SlideshowFX-code-extension:bintrayUpload',
                                                  ':SlideshowFX-shape-extension:bintrayUpload',
                                                  ':SlideshowFX-image-extension:bintrayUpload',
                                                  ':SlideshowFX-link-extension:bintrayUpload',
                                                  ':SlideshowFX-quiz-extension:bintrayUpload',
                                                  ':SlideshowFX-quote-extension:bintrayUpload',
                                                  ':SlideshowFX-sequence-diagram-extension:bintrayUpload',
                                                  ':SlideshowFX-snippet-extension:bintrayUpload' ]

    hostingConnectorJars = [ project(':SlideshowFX-box-hosting-connector').jar,
                             project(':SlideshowFX-dropbox-hosting-connector').jar,
                             project(':SlideshowFX-drive-hosting-connector').jar ]

    hostingConnectorJarDependencies = [ ':SlideshowFX-box-hosting-connector:jar',
                                        ':SlideshowFX-dropbox-hosting-connector:jar',
                                        ':SlideshowFX-drive-hosting-connector:jar' ]

    hostingConnectorBintrayUploadDependencies = [ ':SlideshowFX-box-hosting-connector:bintrayUpload',
                                                  ':SlideshowFX-dropbox-hosting-connector:bintrayUpload',
                                                  ':SlideshowFX-drive-hosting-connector:bintrayUpload' ]

    snippetExecutorJars = [ project(':SlideshowFX-go-executor').jar, project(':SlideshowFX-golo-executor').jar,
                            project(':SlideshowFX-groovy-executor').jar, project(':SlideshowFX-java-executor').jar,
                            project(':SlideshowFX-javascript-executor').jar, project(':SlideshowFX-kotlin-executor').jar,
                            project(':SlideshowFX-scala-executor').jar ]

    snippetExecutorJarDependencies = [ ':SlideshowFX-go-executor:jar', ':SlideshowFX-golo-executor:jar',
                                       ':SlideshowFX-groovy-executor:jar', ':SlideshowFX-java-executor:jar',
                                       ':SlideshowFX-javascript-executor:jar', ':SlideshowFX-kotlin-executor:jar',
                                       ':SlideshowFX-scala-executor:jar' ]

    snippetExecutorBintrayUploadDependencies = [ ':SlideshowFX-go-executor:bintrayUpload',
                                                 ':SlideshowFX-golo-executor:bintrayUpload',
                                                 ':SlideshowFX-groovy-executor:bintrayUpload',
                                                 ':SlideshowFX-java-executor:bintrayUpload',
                                                 ':SlideshowFX-javascript-executor:bintrayUpload',
                                                 ':SlideshowFX-kotlin-executor:bintrayUpload',
                                                 ':SlideshowFX-scala-executor:bintrayUpload' ]

    packagingSuffix = ""
    if(isMac) {
        packagingSuffix += "osx"
    } else if(isWindows) {
        packagingSuffix += "windows"
    } else if(isLinux) {
        packagingSuffix += "unix"
    } else {
        packagingSuffix += "generic"
    }

    packagingSuffix += "-$osArch"
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'distribution'

version = '@@NEXT-VERSION@@'

wrapper {
    gradleVersion = '4.0.2'
}

asciidoctorj {
    version = '1.5.5'
}

asciidoctor {
    backends = ['html5','pdf']
    attributes = [
            'source-highlighter': 'coderay',
            toc: 'left',
            icons: 'font',
            setanchors: '',
            sectlinks: '',
            linkcss: false,
            'slideshowfx_version': project.version,
            'asciidoctor-source': new File(project(':SlideshowFX-app').projectDir, 'src/main/resources/com/twasyl/slideshowfx/documentation').absolutePath,
            'javafx-version': '8 update 131',
            'jdk-version': '8 update 131',
            'gradle-version': "${wrapper.gradleVersion}",
            'asciidoctorj-version': "$asciidoctorjVersion",
            'apache-felix-version': "$felixVersion",
            'freemarker-version': "$freemarkerVersion",
            'jsoup-version': "$jsoupVersion",
            'wikitext-textile-core-version': "$wikitextVersion",
            'twitter4j-version': "$twitterVersion",
            'txtmark-version': "$markdownVersion",
            'vertx-version': "$vertxVersion",
            'zxing-core-version': "$zxingVersion",
            'zxing-jse-version': "$zxingVersion",
            'ace-version': '1.2.8'
    ]
}

task installMarkupPlugins(dependsOn: markupJarDependencies) {
    doLast {
        copy {
            from(markupJars)

            into pluginsFolder
        }
    }
}

task installContentExtensionPlugins(dependsOn: contentExtensionJarDependencies) {
    doLast {
        copy {
            from(contentExtensionJars)

            into pluginsFolder
        }
    }
}

task installHostingConnectorPlugins(dependsOn : hostingConnectorJarDependencies) {
    doLast {
        copy {
            from(hostingConnectorJars)

            into pluginsFolder
        }
    }
}

task installSnippetExecutorPlugins(dependsOn : snippetExecutorJarDependencies) {
    doLast {
        copy {
            from(snippetExecutorJars)

            into pluginsFolder
        }
    }
}

task installAllPlugins(dependsOn: [ ':installMarkupPlugins', ':installContentExtensionPlugins',
                                    ':installHostingConnectorPlugins', ':installSnippetExecutorPlugins']) {
}

task publishAllMarkup(dependsOn : markupBintrayUploadDependencies ) {
}

task publishAllContentExtension(dependsOn: contentExtensionBintrayUploadDependencies) {

}
task publishAllHostingConnector(dependsOn : hostingConnectorBintrayUploadDependencies) {
}

task publishAllSnippetExecutor(dependsOn : snippetExecutorBintrayUploadDependencies) {
}

task publishAllToBintray(dependsOn : ['publishAllMarkup', 'publishAllContentExtension', 'publishAllHostingConnector',
                                       'publishAllSnippetExecutor']) {
}

distributions {
    main {
        baseName = "SlideshowFX-${packagingSuffix}"
        contents {
            // Documentation
            into('documentations/html') {
                from("${asciidoctor.outputDir}/html5") {
                    include '*'
                }
            }
            into('documentations/pdf') {
                from("${asciidoctor.outputDir}/pdf") {
                    include '*.pdf'
                }
            }

            into({-> project(':SlideshowFX-setup').bundle.getBundleName() }) {
                from project(':SlideshowFX-setup').bundle
            }
        }
    }
}

tasks.distZip.dependsOn = [ 'asciidoctor', ':SlideshowFX-setup:bundle' ]
tasks.distTar.enabled = false

bintray {
    filesSpec {
        from tasks.distZip.archivePath
        into '.'
        rename '(.+)-(.+)\\.(.+)', '$1-$2' + packagingSuffix + '.$3'
    }

    pkg {
        repo = 'SlideshowFX'
        name = project.name
        websiteUrl = 'https://slideshowfx.github.io'
        issueTrackerUrl = 'https://github.com/twasyl/SlideshowFX/issues'
        vcsUrl = 'https://github.com/twasyl/SlideshowFX.git'

        desc = project.description

        licenses = ['Apache-2.0']

        githubRepo = 'twasyl/SlideshowFX'

        version {
            name = project.version
            desc = project.description
            released = new Date()
            vcsTag = "v${project.version}"
        }
    }
}