buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

def stripProjectVersion(String version) {
    if (version.contains("-SNAPSHOT")) {
        return version.replace("-SNAPSHOT", "")
    } else {
        return version
    }
}

def getPlatform() {
    def osProperty = System.properties['os.name'].toLowerCase()

    if (osProperty.startsWith('mac')) {
        return ext.os.MAC
    } else if (osProperty.startsWith('windows')) {
        return ext.os.WINDOWS
    } else if (osProperty.startsWith('linux')) {
        return ext.os.UNIX
    } else {
        return ext.os.UNKNOWN
    }
}

def getArchitecture() {
    return System.properties['os.arch']
}

/**
 * Determine the suffix for a package according the platform and the architecture.
 */
def getPlatformAndArchitecture() {
    return "${getPlatform()}-${getArchitecture()}"
}

def isPlugin(Project project) {
    return project.findProperty('isPlugin') ?: false
}

def isMarkupPlugin(Project project) {
    if (isPlugin(project)) {
        return project.findProperty('isMarkupPlugin') ?: false
    } else {
        return false
    }
}

def isSnippetExecutorPlugin(Project project) {
    if (isPlugin(project)) {
        return project.findProperty('isSnippetExecutor') ?: false
    } else {
        return false
    }
}

def isHostingConnectorPlugin(Project project) {
    if (isPlugin(project)) {
        return project.findProperty('isHostingConnector') ?: false
    } else {
        return false
    }
}

def isContentExtensionPlugin(Project project) {
    if (isPlugin(project)) {
        return project.findProperty('isContentExtension') ?: false
    } else {
        return false
    }
}

ext.os = [
        MAC: 'osx',
        WINDOWS: 'windows',
        UNIX: 'unix',
        UNKNOWN: 'unknown'
]

ext.dependencies = [
        asciidoctorj: [version: '1.5.6'],
        box         : [version: '2.14.1'],
        drive       : [version: 'v3-rev103-1.23.0'],
        dropbox     : [version: '3.0.6'],
        felix       : [version: '5.6.10'],
        freemarker  : [version: '2.3.27-incubating'],
        jsoup       : [version: '1.11.2'],
        junit       : [version: '5.1.0'],
        markdown    : [version: '0.13'],
        mockito     : [version: '2.10.0'],
        rxJava      : [version: '2.1.9'],
        vertx       : [version: '3.5.1'],
        wikitext    : [version: '3.0.23'],
        zxing       : [version: '3.3.2']
]

subprojects {
    afterEvaluate { project ->
        def isJavaProject = project.pluginManager.hasPlugin('java') || project.pluginManager.hasPlugin('java-library')
        def isProjectPlugin = rootProject.isPlugin(project)

        if (isJavaProject) {
            dependencies {
                testImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.dependencies.junit.version}"
                testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.dependencies.junit.version}"
            }

            test {
                useJUnitPlatform()
            }
        }

        if (isProjectPlugin || project.name.equals('slideshowfx-setup')) {
            project.pluginManager.apply('com.jfrog.bintray')

            bintray {
                user = System.properties['bintrayUserName'] ?: System.env['BINTRAY_USER_NAME']
                key = System.properties['bintrayApiKey'] ?: System.env['BINTRAY_API_KEY']

                configurations = ['archives']

                pkg {
                    repo = 'SlideshowFX'
                    name = project.name
                    websiteUrl = 'https://slideshowfx.github.io'
                    issueTrackerUrl = 'https://github.com/twasyl/SlideshowFX/issues'
                    vcsUrl = 'https://github.com/twasyl/SlideshowFX.git'

                    desc = project.description

                    licenses = ['Apache-2.0']

                    githubRepo = 'twasyl/SlideshowFX'
                    githubReleaseNotesFile = 'CHANGELOG.textile'

                    version {
                        name = rootProject.stripProjectVersion(project.version)
                        desc = project.description
                        released = new Date()
                        vcsTag = "v${rootProject.stripProjectVersion(project.version)}"
                    }
                }
            }

            bintrayUpload.enabled = project.version.contains('-SNAPSHOT')
        }

        if (isProjectPlugin) {

            dependencies {
                implementation "org.apache.felix:org.apache.felix.framework:${rootProject.ext.dependencies.felix.version}"
            }

            task installPlugin(type: Copy) {
                from project.jar
                into "${System.properties['user.home']}/.SlideshowFX/plugins"
            }

            installPlugin.dependsOn jar
        }
    }

    tasks.withType(JavaCompile) {
        compileJava {
            sourceCompatibility = JavaVersion.VERSION_1_8
        }

        options.encoding = "UTF-8"
    }

    tasks.withType(Jar) { task ->
        afterEvaluate { project ->
            Map<String, ?> manifestAttributes = ['Implementation-Vendor': 'Thierry Wasylczenko']

            if (rootProject.isPlugin(project)) {
                manifestAttributes += [
                        'Bundle-ManifestVersion': '2',
                        'Bundle-Name'           : project.ext.bundle.name,
                        'Bundle-SymbolicName'   : project.ext.bundle.symbolicName,
                        'Bundle-Version'        : stripProjectVersion(project.version),
                        'Bundle-Description'    : project.ext.bundle.description,
                        'Bundle-Activator'      : project.ext.bundle.activator,
                        'Bundle-ClassPath'      : project.ext.bundle.classPath ?: '.',
                        'Bundle-Vendor'         : 'Thierry Wasylczenko',
                        'Export-Package'        : project.ext.bundle.exportPackage,
                        'Setup-Wizard-Label'    : project.ext.bundle.setupWizardLabel,
                        'Import-Package'        : 'org.osgi.framework'
                ]

                if (project.ext.bundle.containsKey('setupWizardIconName')) {
                    manifestAttributes += ['Setup-Wizard-Icon-Name': project.ext.bundle.setupWizardIconName]
                }
            }

            jar {
                manifest {
                    attributes(manifestAttributes)
                }
            }
        }
    }
}