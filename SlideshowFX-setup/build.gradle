version = '1.2'

dependencies {
    compile project(':SlideshowFX-global-configuration')
    compile project(':SlideshowFX-icons')
    compile project(':SlideshowFX-logs')
    compile project(':SlideshowFX-ui-controls')
    compile project(':SlideshowFX-utils')

    testCompile "junit:junit:$junitVersion"
}

jar {
    manifest {
        attributes("Implementation-Title": "SlideshowFX-setup",
                "Implementation-Version": version,
                "Implementation-Vendor": "Thierry Wasylczenko",
                "Main-Class": "com.twasyl.slideshowfx.setup.app.SlideshowFXSetup",
                "JavaFX-Version": "8.0+",
                "Class-Path": configurations.compile.collect { it.getName() }.join(' '))
    }
}

javafx {
    bundleBaseName = "SlideshowFXSetup"
    antBuild = file("${rootDir.absolutePath}/src/main/resources/javafx/${project.name}.xml")

    antProperties.put('applicationVersion', project(':SlideshowFX-app').version)

    bundleResources.put('package/documentations/html', fileTree(dir: "${rootProject.tasks.asciidoctor.outputDir}/html5", include: '*'))
    bundleResources.put('package/documentations/pdf', fileTree(dir: "${rootProject.tasks.asciidoctor.outputDir}/pdf", include: '*.pdf'))
    bundleResources.put('package/' + project(':SlideshowFX-app').bundle.bundleFile.name, project(':SlideshowFX-app').bundle)
    bundleResources.put('package/plugins/markups', markupJars)
    bundleResources.put('package/plugins/extensions', contentExtensionJars)
    bundleResources.put('package/plugins/executors', snippetExecutorJars)
    bundleResources.put('package/plugins/hostingConnectors', hostingConnectorJars)
    bundleResources.put('.', files(project(':SlideshowFX-global-configuration').jar, project(':SlideshowFX-logs').jar, project(':SlideshowFX-icons').jar, project(':SlideshowFX-ui-controls').jar, project(':SlideshowFX-utils').jar, project.jar))
}

tasks.bundle.dependsOn project(':SlideshowFX-app').bundle
tasks.copyBundleResources.dependsOn markupJarDependencies
tasks.copyBundleResources.dependsOn contentExtensionJarDependencies
tasks.copyBundleResources.dependsOn hostingConnectorJarDependencies
tasks.copyBundleResources.dependsOn snippetExecutorJarDependencies
tasks.copyBundleResources.dependsOn rootProject.tasks.asciidoctor

tasks.bintrayUpload.enabled = false