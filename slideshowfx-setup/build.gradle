description = 'Module for the installer of SlideshowFX'
version = '2.0'

apply plugin: 'java'
apply plugin: 'distribution'

dependencies {
    compile project(':slideshowfx-global-configuration')
    compile project(':slideshowfx-icons')
    compile project(':slideshowfx-logs')
    compile project(':slideshowfx-ui-controls')
    compile project(':slideshowfx-utils')
}

ext.packaging = [
        extension: rootProject.ext.os.MAC == rootProject.getPlatform() ? ".app" : ""
]

processResources {
    doLast {
        ant.propertyfile(file: "${buildDir}/resources/main/com/twasyl/slideshowfx/setup/setup.properties") {
            entry(key: 'setup.application.name', value: 'SlideshowFX')
            entry(key: 'setup.application.version', value: "${version}")
            entry(key: 'setup.application.artifact', value: "./package/SlideshowFX${project(':slideshowfx-app').ext.packaging.extension}")
            entry(key: 'setup.service.twitter.consumerKey', value: "${System.env['TWITTER_CONSUMER_KEY']}")
            entry(key: 'setup.service.twitter.consumerSecret', value: "${System.env['TWITTER_CONSUMER_SECRET']}")
        }
    }
}

jar {
    manifest {
        attributes += [
                'Implementation-Title'    : 'SlideshowFX-setup',
                'Implementation-Version'  : "${version}",
                'Class-Path'              : configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class'              : 'com.twasyl.slideshowfx.setup.app.SlideshowFXSetup',
                'JavaFX-Application-Class': 'com.twasyl.slideshowfx.setup.app.SlideshowFXSetup',
                'JavaFX-Version'          : '8.0+'
        ]
    }
}


task prepareBundle() {
    doLast {
        copy {
            from configurations.compile
            from jar
            into "${buildDir}/tmp/bundles"
        }

        rootProject.subprojects.each { project ->
            String destination
            if (rootProject.isMarkupPlugin(project)) {
                destination = "${buildDir}/tmp/bundles/package/plugins/markups"
            } else if (rootProject.isSnippetExecutorPlugin(project)) {
                destination = "${buildDir}/tmp/bundles/package/plugins/executors"
            } else if (rootProject.isHostingConnectorPlugin(project)) {
                destination = "${buildDir}/tmp/bundles/package/plugins/hostingConnectors"
            } else if (rootProject.isContentExtensionPlugin(project)) {
                destination = "${buildDir}/tmp/bundles/package/plugins/extensions"
            }

            if (destination != null) {
                copy {
                    from project.jar
                    into destination
                }
            }
        }

        project(':slideshowfx-documentation').unzipDocumentationsIn("${buildDir}/tmp/bundles/package/documentations", true)
        project(':slideshowfx-documentation').unzipDocumentationsIn("${buildDir}/bundle/bundles/documentations", true)

        project(':slideshowfx-app').createBundle.outputs.files.each { file ->
            copy {
                from file
                into "${buildDir}/tmp/bundles/package/${file.name}"
            }
        }
    }
}

task createBundle() {
    outputs.files("${buildDir}/bundle/bundles/SlideshowFXSetup${project.ext.packaging.extension}")

    doLast {
        def deployOutDir = new File("${buildDir}/bundle")
        def deployResourcesDir = new File("${buildDir}/tmp/bundles")

        ant.importBuild "${projectDir}/src/assembly/javafx/SlideshowFX-setup.xml"
        ant.classpath = "${System.env['JAVA_HOME']}/lib/ant-javafx.jar"
        ant['build.deploy.out.dir'] = deployOutDir.absolutePath
        ant['build.deploy.out.file'] = "SlideshowFXSetup"
        ant['build.deploy.resources.dir'] = deployResourcesDir.absolutePath

        if (!new File(ant['build.deploy.out.dir']).exists()) {
            new File(ant['build.deploy.out.dir']).mkdirs()
        }

        def platform = rootProject.getPlatform()

        if (platform == rootProject.ext.os.MAC) {
            logger.info('Building the OSX bundle')
            deployOSX.execute()
        } else if (platform == rootProject.ext.os.WINDOWS) {
            logger.info('Building the Windows bundle')
            deployWindows.execute()
        } else {
            logger.info('Building the unix bundle')
            deployUnknown.execute()
        }

        deployResourcesDir.deleteDir()
        new File(deployOutDir, "package").deleteDir()
        delete fileTree(dir: deployOutDir, exclude: 'bundles')
        delete fileTree(dir: "${buildDir}/bundle/bundles", excludes: ["documentations", "SlideshowFXSetup${project.ext.packaging.extension}"])
    }
}

distributions {
    main {
        baseName = "SlideshowFX-${rootProject.getPlatformAndArchitecture()}"
        contents {
            from "${buildDir}/bundle/bundles/"
        }
    }
}

prepareBundle.dependsOn jar,
        ':slideshowfx-documentation:distZip',
        ':slideshowfx-app:createBundle',
        ':slideshowfx-alert-extension:jar',
        ':slideshowfx-box-hosting-connector:jar',
        ':slideshowfx-code-extension:jar',
        ':slideshowfx-drive-hosting-connector:jar',
        ':slideshowfx-dropbox-hosting-connector:jar',
        ':slideshowfx-go-executor:jar',
        ':slideshowfx-golo-executor:jar',
        ':slideshowfx-groovy-executor:jar',
        ':slideshowfx-html:jar',
        ':slideshowfx-image-extension:jar',
        ':slideshowfx-java-executor:jar',
        ':slideshowfx-javascript-executor:jar',
        ':slideshowfx-kotlin-executor:jar',
        ':slideshowfx-link-extension:jar',
        ':slideshowfx-markdown:jar',
        ':slideshowfx-quiz-extension:jar',
        ':slideshowfx-quote-extension:jar',
        ':slideshowfx-scala-executor:jar',
        ':slideshowfx-sequence-diagram-extension:jar',
        ':slideshowfx-shape-extension:jar',
        ':slideshowfx-snippet-extension:jar',
        ':slideshowfx-textile:jar'

createBundle.dependsOn prepareBundle
distZip.dependsOn createBundle
distTar.enabled = false