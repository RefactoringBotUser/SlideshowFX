description = 'The SlideshowFX application'
version = '@@NEXT_VERSION@@'

apply plugin: 'java'

dependencies {
    compile project(':slideshowfx-content-extension')
    compile project(':slideshowfx-documentation')
    compile project(':slideshowfx-engines')
    compile project(':slideshowfx-global-configuration')
    compile project(':slideshowfx-hosting-connector')
    compile project(':slideshowfx-icons')
    compile project(':slideshowfx-logs')
    compile project(':slideshowfx-markup')
    compile project(':slideshowfx-osgi')
    compile project(':slideshowfx-plugin')
    compile project(':slideshowfx-server')
    compile project(':slideshowfx-snippet-executor')
    implementation project(':slideshowfx-theme')
    compile project(':slideshowfx-ui-controls')
    compile project(':slideshowfx-utils')

    compile "com.google.zxing:javase:${rootProject.ext.dependencies.zxing.version}"

    testCompile "org.mockito:mockito-core:${rootProject.ext.dependencies.mockito.version}"
}

ext.packaging = [
        extension: rootProject.ext.os.MAC == rootProject.getPlatform() ? ".app" : ""
]

processResources {
    doLast {
        project(':slideshowfx-documentation').unzipDocumentationsIn("${buildDir}/resources/main/com/twasyl/slideshowfx/documentation", true)
    }
}

jar {
    manifest {
        attributes += [
                'Implementation-Title'    : 'SlideshowFX',
                'Implementation-Version'  : "${version}",
                'Class-Path'              : configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class'              : 'com.twasyl.slideshowfx.app.SlideshowFX',
                'JavaFX-Preloader-Class'  : 'com.twasyl.slideshowfx.app.SlideshowFXPreloader',
                'JavaFX-Application-Class': 'com.twasyl.slideshowfx.app.SlideshowFX',
                'JavaFX-Version'          : '8.0+'
        ]
    }
}

task prepareBundle(type: Copy) {
    from configurations.compile
    from jar

    into "${buildDir}/tmp/bundles"
}

task createBundle() {
    outputs.files("${buildDir}/bundle/bundles/SlideshowFX${project.ext.packaging.extension}")
    doLast {
        def deployOutDir = new File("${buildDir}/bundle")
        def deployResourcesDir = new File("${buildDir}/tmp/bundles")

        ant.importBuild "${projectDir}/src/assembly/javafx/SlideshowFX-app.xml"
        ant.classpath = "${System.env['JAVA_HOME']}/lib/ant-javafx.jar"
        ant['build.deploy.out.dir'] = deployOutDir.absolutePath
        ant['build.deploy.out.file'] = "SlideshowFX"
        ant['build.deploy.resources.dir'] = deployResourcesDir.absolutePath

        if (!new File(ant['build.deploy.out.dir']).exists()) {
            new File(ant['build.deploy.out.dir']).mkdirs()
        }

        def platform = rootProject.getPlatform();

        if (platform == rootProject.ext.os.MAC) {
            deployOSX.execute()
        } else if (platform == rootProject.ext.os.WINDOWS) {
            deployWindows.execute()
        } else {
            deployUnknown.execute()
        }

        deployResourcesDir.deleteDir()
        new File(deployOutDir, "package").deleteDir()
        delete fileTree(dir: deployOutDir, exclude: 'bundles')
        delete fileTree(dir: "${buildDir}/bundle/bundles", exclude: "SlideshowFX${project.ext.packaging.extension}")
    }
}

task createSlideContentEditor {
    doLast {
        def aceVersion = project.findProperty('aceVersion') ?: ''
        def binaryDir = new File("${buildDir}/tmp/sfx-slide-content-editor-update")
        def binary = new File("${binaryDir}/binary-${aceVersion}.zip")
        def newEditorDir = new File(binaryDir, "sfx-slide-content-editor")
        def unpackedBinary = new File("${binaryDir}/ace-builds-${aceVersion}")
        
        if (!binaryDir.exists()) {
            binaryDir.mkdirs()
        }

        new URL("https://github.com/ajaxorg/ace-builds/archive/v${aceVersion}.zip").withInputStream { i ->
            binary.withOutputStream {
                it << i
            }
        }

        copy {
            from zipTree(binary)
            into binaryDir
        }

        binary.delete()

        if (newEditorDir.exists()) {
            newEditorDir.deleteDir()
        }

        copy {
            from fileTree("${unpackedBinary}/src-min-noconflict")
            include "ace.js", "snippets/asciidoc.js", "snippets/html*.js", "snippets/markdown.js", "snippets/textile.js", "ext-language_tools.js", "ext-searchbox.js", "ext-static_highlight.js", "ext-whitespace.js", "keybinding-*.js", "mode-asciidoc.js", "mode-html.js", "mode-markdown.js", "mode-textile.js", "theme-tomorrow_night.js", "worker-*.js"
            into file("${newEditorDir}/ace/${aceVersion}")
        }

        unpackedBinary.deleteDir()

        new File(newEditorDir, "ace-file-editor.html").text = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <style type="text/css" media="screen">
        body {
            overflow: hidden;
        }

        #editor {
            margin: 0;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
        }
    </style>
    <script type="text/javascript">
        // Set the content of the editor. The content is given in Base64
        function setContent(content) {
            var editor = ace.edit("editor");
            editor.setValue(decodeURIComponent(escape(window.atob(content))));
            editor.clearSelection();
            editor.resize();
        }

        // Insert the content where the cursor is
        function appendContent(content) {
            var editor = ace.edit("editor");
            editor.insert(decodeURIComponent(escape(window.atob(content))));
            editor.clearSelection();
            editor.resize();
        }

        // Get the content of the editor. The content is returned in Base64
        function getContent() {
            var editor = ace.edit("editor");
            return window.btoa(unescape(encodeURIComponent(editor.getValue())));
        }

        // Get the selected content of the editor. The content is returned in Base64
        function getSelectedContent() {
            var editor = ace.edit("editor");
            return window.btoa(unescape(encodeURIComponent(editor.getCopyText())));
        }

        // Remove the selection
        function removeSelection() {
            var editor = ace.edit("editor");
            editor.removeLines();
        }

        // Set the mode of this editor
        function setMode(newMode) {
            var editor = ace.edit("editor");
            editor.getSession().setMode(newMode);
        }

        // Select all text in the editor
        function selectAll() {
            var editor = ace.edit("editor");
            editor.selectAll();
        }

        // Request the focus in the editor
        function requestEditorFocus() {
            var editor = ace.edit("editor");
            editor.focus();
        }

        // Change the font size of the editor. If the factor is greater than zero, the font
        // is increased, if less than zero decreased, equal to zero nothing is done.
        function changeFontSize(factor) {
            var changeFontSizeBy = undefined;

            if(factor > 0) changeFontSizeBy = 1;
            else if(factor < 0) changeFontSizeBy = -1;

            if(changeFontSizeBy !== undefined) {
                var editor = ace.edit("editor");
                var currentFontSize = editor.getFontSize();

                editor.setFontSize(currentFontSize + changeFontSizeBy);
            }
        }
    </script>
    <script src="ace/${aceVersion}/ace.js"></script>
</head>
<body>
    <pre id="editor"></pre>

    <script type="text/javascript">
        var editor = ace.edit("editor");
        editor.setTheme("ace/theme/tomorrow_night");
        editor.getSession().setUseWrapMode(true);
    </script>
</body>
</html>
"""
    }
}

task zipSlideContentEditor(type: Zip) {
    archiveName = "sfx-slide-content-editor.zip"
    destinationDir = file("${buildDir}/tmp")
    from("${buildDir}/tmp/sfx-slide-content-editor-update/sfx-slide-content-editor") {
        into "sfx-slide-content-editor"
    }
}

createSlideContentEditor.finalizedBy zipSlideContentEditor

processResources.dependsOn project(':slideshowfx-documentation').distZip
prepareBundle.dependsOn jar
createBundle.dependsOn prepareBundle
build.dependsOn createBundle