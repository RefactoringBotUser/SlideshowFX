description = 'The SlideshowFX application'
version = '@@NEXT_VERSION@@'

apply plugin: 'java'

dependencies {
    compile project(':slideshowfx-content-extension')
    compile project(':slideshowfx-documentation')
    compile project(':slideshowfx-engines')
    compile project(':slideshowfx-global-configuration')
    compile project(':slideshowfx-hosting-connector')
    compile project(':slideshowfx-icons')
    compile project(':slideshowfx-logs')
    compile project(':slideshowfx-markup')
    compile project(':slideshowfx-osgi')
    compile project(':slideshowfx-plugin')
    compile project(':slideshowfx-server')
    compile project(':slideshowfx-snippet-executor')
    compile project(':slideshowfx-ui-controls')
    compile project(':slideshowfx-utils')

    compile "com.google.zxing:javase:${rootProject.ext.dependencies.zxing.version}"

    testCompile "org.mockito:mockito-core:${rootProject.ext.dependencies.mockito.version}"
}

ext.packaging = [
        extension: rootProject.ext.os.MAC == rootProject.getPlatform() ? ".app" : ""
]

processResources {
    doLast {
        project(':slideshowfx-documentation').unzipDocumentationsIn("${buildDir}/resources/main/com/twasyl/slideshowfx/documentation", true)
    }
}

jar {
    manifest {
        attributes += [
                'Implementation-Title'    : 'SlideshowFX',
                'Implementation-Version'  : "${version}",
                'Class-Path'              : configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class'              : 'com.twasyl.slideshowfx.app.SlideshowFX',
                'JavaFX-Preloader-Class'  : 'com.twasyl.slideshowfx.app.SlideshowFXPreloader',
                'JavaFX-Application-Class': 'com.twasyl.slideshowfx.app.SlideshowFX',
                'JavaFX-Version'          : '8.0+'
        ]
    }
}

task prepareBundle(type: Copy) {
    from configurations.compile
    from jar

    into "${buildDir}/tmp/bundles"
}

task createBundle() {
    outputs.files("${buildDir}/bundle/bundles/SlideshowFX${project.ext.packaging.extension}")
    doLast {
        def deployOutDir = new File("${buildDir}/bundle")
        def deployResourcesDir = new File("${buildDir}/tmp/bundles")

        ant.importBuild "${projectDir}/src/assembly/javafx/SlideshowFX-app.xml"
        ant.classpath = "${System.env['JAVA_HOME']}/lib/ant-javafx.jar"
        ant['build.deploy.out.dir'] = deployOutDir.absolutePath
        ant['build.deploy.out.file'] = "SlideshowFX"
        ant['build.deploy.resources.dir'] = deployResourcesDir.absolutePath

        if (!new File(ant['build.deploy.out.dir']).exists()) {
            new File(ant['build.deploy.out.dir']).mkdirs()
        }

        def platform = rootProject.getPlatform();

        if (platform == rootProject.ext.os.MAC) {
            deployOSX.execute()
        } else if (platform == rootProject.ext.os.WINDOWS) {
            deployWindows.execute()
        } else {
            deployUnknown.execute()
        }

        deployResourcesDir.deleteDir()
        new File(deployOutDir, "package").deleteDir()
        delete fileTree(dir: deployOutDir, exclude: 'bundles')
        delete fileTree(dir: "${buildDir}/bundle/bundles", exclude: "SlideshowFX${project.ext.packaging.extension}")
    }
}

processResources.dependsOn project(':slideshowfx-documentation').distZip
prepareBundle.dependsOn jar
createBundle.dependsOn prepareBundle
build.dependsOn createBundle